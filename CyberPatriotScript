#!/bin/bash

#install the needed programs like rkhunter, tree, etc
apt-get install rkhunter tree debsums libpam-cracklib chkrootkit clamav lynis -y > /dev/null 2>&1 

# VSFTPD
echo -n "Should VSFTP Be Installed/Reinstalled? [Y/n] "
read option
if [[ $option =~ ^[Yy]$ ]]
then
 	apt-get -y install vsftpd > /dev/null 2>&1 
 	# Disable anonymous uploads
 	sed -i '/^anon_upload_enable/ c\anon_upload_enable no   #' /etc/vsftpd.conf # outdated?
 	sed -i '/^anonymous_enable/ c\anonymous_enable=NO  #' /etc/vsftpd.conf
	# FTP user directories use chroot
	sed -i '/^chroot_local_user/ c\chroot_local_user=YES  #' /etc/vsftpd.conf
	service vsftpd restart
else
	dpkg --purge vsftpd > /dev/null 2>&1 
fi


# Apache2
echo -n "Should Apache2 Be Installed/Reinstalled? [Y/n] "
read option
if [[ $option =~ ^[Yy]$ ]]
then
 	apt-get install apache2 libapache2-mod-php5  > /dev/null 2>&1 
file=$( echo /etc/apache2/conf-enabled/security.conf )
#replace ServerTokens and ServerSignature
sed -i 's/ServerTokens/ServerTokens Prod  # /g' $file
sed -i 's/ServerSignature/ServerSignature Off # /g' $file
echo "<Directory />
    		Options -Indexes 
		</Directory>" >> $file
#Critical File Permissions
	chown -R root:root /etc/apache2
	chown -R root:root /etc/apache

	#Secure Apache 2
	if [[ -e /etc/apache2/apache2.conf ]]; then
		echo \<Directory \> >> /etc/apache2/apache2.conf
		echo -e ' \t AllowOverride None' >> /etc/apache2/apache2.conf
		echo -e ' \t Order Deny,Allow' >> /etc/apache2/apache2.conf
		echo -e ' \t Deny from all' >> /etc/apache2/apache2.conf
		echo \<Directory \/\> >> /etc/apache2/apache2.conf
		echo UserDir disabled root >> /etc/apache2/apache2.conf
	fi
#THIS MAY BREAK APACHE2, NOT ENTIRELY SURE, TEST FIRST

 else
	  dpkg --purge apache2 > /dev/null 2>&1 
fi


# MySQL
echo -n "Should MySQL Be Installed/Reinstalled? [Y/n] "
read option
if [[ $option =~ ^[Yy]$ ]]
then
 	apt-get install mysql-server php5-mysql -y > /dev/null 2>&1 
	mysql_secure_installation
file=$( echo /etc/mysql/my.cnf )
#bind-address = 127.0.0.1 #
sed -i 's/bind-address/bind-address = 127.0.0.1 # /g' $file
service mysql restart

 else
	  dpkg --purge mysql-server php5-mysql > /dev/null 2>&1 
fi


# Php
echo -n "Should PHP5 Be Installed/Reinstalled? [Y/n] "
read option
if [[ $option =~ ^[Yy]$ ]]
then
 	apt-get install python-software-properties -y > /dev/null 2>&1 
	add-apt-repository ppa:ondrej/php5-oldstable
	apt-get update -y > /dev/null 2>&1 
	apt-get install -y php5 > /dev/null 2>&1 
	file=$(echo /etc/php5/apache2/php.ini)

	#At the end of each of these lines is a ; instead of a #, this is b/c this configuration has different syntax than bash and the ; tells it to comment the rest out.

	sed -i 's/expose_php/expose_php=Off ; /g' $file
sed -i 's/allow_url_fopen/allow_url_fopen=Off ; /g' $file
sed -i 's/allow_url_include/allow_url_include=Off ; /g' $file
#disable_functions 
sed -i 's/disable_functions=/disable_functions=exec,shell_exec,passthru,system,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source,proc_open,pcntl_exec,/g' $file
sed -i 's/upload_max_filesize/upload_max_filesize = 2M ; /g' $file
sed -i 's/max_execution_time/max_execution_time = 30 ; /g' $file
sed -i 's/max_input_time/max_input_time = 60 ; /g' $file
else
	  dpkg --purge php5 > /dev/null 2>&1 
fi


# SSH
echo -n "Should SSH Be Installed/Reinstalled? [Y/n] "
read option
if [[ $option =~ ^[Yy]$ ]]
then
apt-get install ssh openssh-server openssh-client -y > /dev/null 2>&1 
#goes and replaces the /etc/ssh/sshd_config with clean one
echo "Replacing /etc/ssh/sshd_config" >> WorkProperly.txt
cp /etc/ssh/sshd_config /etc/ssh/.sshd_config
echo "# Package generated configuration file
# See the sshd_config(5) manpage for details
# What ports, IPs and protocols we listen for
Port 22
# Use these options to restrict which interfaces/protocols sshd will bind to
#ListenAddress ::
#ListenAddress 0.0.0.0
Protocol 2
# HostKeys for protocol version 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
#Privilege Separation is turned on for security
UsePrivilegeSeparation yes
# Lifetime and size of ephemeral version 1 server key
KeyRegenerationInterval 3600
ServerKeyBits 768
# Logging
SyslogFacility AUTH
LogLevel INFO

# Authentication:
LoginGraceTime 120
PermitRootLogin no
StrictModes yes

RSAAuthentication yes
PubkeyAuthentication yes
#AuthorizedKeysFile	%h/.ssh/authorized_keys

# Don't read the user's ~/.rhosts and ~/.shosts files
IgnoreRhosts yes
# For this to work you will also need host keys in /etc/ssh_known_hosts
RhostsRSAAuthentication no
# similar for protocol version 2
HostbasedAuthentication no
# Uncomment if you don't trust ~/.ssh/known_hosts for RhostsRSAAuthentication
#IgnoreUserKnownHosts yes
# To enable empty passwords, change to yes (NOT RECOMMENDED)

PermitEmptyPasswords no
# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication no

# Change to no to disable tunnelled clear text passwords
#PasswordAuthentication yes

# Kerberos options
#KerberosAuthentication no
#KerberosGetAFSToken no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes
X11Forwarding no

X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no

#MaxStartups 10:30:60
#Banner /etc/issue.net
# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

Subsystem sftp /usr/lib/openssh/sftp-server

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of \"PermitRootLogin without-password\".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes" > /etc/ssh/sshd_config
service ssh restart
echo "" >> WorkProperly.txt
echo "Finished with SSH"

else
	dpkg --purge ssh openssh-server openssh-client > /dev/null 2>&1 
fi


#Looks at the entire list of users so you can see what they all have
( tree /home >> homeDirectory.txt; echo "Finished saving entire home directory" ) &

#Add password policy
echo " " > /tmp/stuff
#echo "How many days do you want the max to be?" -n
#read output
output=15
sed -i 's/PASS_MAX_DAYS\t9999/PASS_MAX_DAYS\t'"$output"'/g' /etc/login.defs
#mv /tmp/stuff  /etc/login.defs
#echo " " > /tmp/stuff
sed  -i 's/PASS_MIN_DAYS\t0/PASS_MIN_DAYS\t10/g' /etc/login.defs

sed -i 's/password\trequisite\t\t\tpam_cracklib.so/password\trequisite\t\t\tpam_cracklib.so ucredit=-1 lcredit=-1 ocredit=-1 dcredit=-1/g' /etc/pam.d/common-password


#echo "password requisite pam_cracklib.so retry=3 minlen=6 difok=3 reject_username minclass=3 maxrepeat=2 dcredit=1 ucredit=1 lcredit=1 ocredit=1" >> /etc/pam.d/common-password
#The sed command above should add the necessary stuff

echo "#auth optional pam_tally.so deny=5 unlock_time=900 onerr=fail audit silent " >> /etc/pam.d/common-auth
echo "password requisite pam_pwhistory.so use_authtok remember=24" >>  /etc/pam.d/common-password

#echo "Finished Password Policy"

#Add basic lockout policy
cp /etc/pam.d/common-auth /etc/pam.d/common-auth~
echo "auth [success=1 default=ignore] pam_unix.so nullok_secure 
auth required pam_deny.so 	#was requisite
auth required pam_permit.so
auth required pam_tally2.so onerr=fail deny=3 unlock_time=1800" > /etc/pam.d/common-auth
echo "Lockout policy enabled"



#Goes and updates all the updates quickly
gnome-terminal -e "bash -c \"(apt-get update; apt-get upgrade -y; apt-get dist-upgrade -y)\"" & disown; sleep 2; 
#kill -INT $$
#This will start a new terminal, uses disown to cut itself off from getting canceled from the original terminal, sleep for a bit for the error code, then sends contrl+c to the current terminal to allow script to continue ($$ means this script’s PID) THE KILL IS NOT NECESSARY
echo "updating in progress"
echo "updating in progress"
clear
#Doing all of that as (;;;) & will cause the output to show up in that terminal not a new one, but it is executed asynchronously.

#Runs rkhunter and saves any warnings
(echo "rkhunter says:" >> Warnings.rkhunter.txt; rkhunter -c --rwo >> Warnings.rkhunter.txt; echo "" >> Warnings.txt; echo "Finished rkhunter scan" ) &
disown; sleep 2; 

#run chkrootkit and save output into Warnings
( echo "Chkrootkit found (NOTE There may be false positives):" >> Warnings.chkrootkit.txt; chkrootkit -q >> Warnings.txt; echo "" >> Warnings.txt; echo "Finished chkrootkit scan" ) &
disown; sleep 2; 


#runs Debsums to check and see if there are any weirdly changed files around
( echo "Debsums says:" >> Warnings.txt; debsums -a -s >> Warnings.txt 2>&1; echo "" >> Warnings.txt; echo "Finished debsums scan" ) &
disown; sleep 2; 


#install Clamav onto the computer and begin running it
#apt-get install clamav	gets installed earlier
( freshclam; clamscan -r --bell -i / >> Clamav.txt; echo "Finished Clamav scanning" ) &
disown; sleep 2; 

#Starts lynis, which helps in securing computer
( lynis -c -Q >> LynisOutput.txt; echo "Finished Lynis" ) &
disown; sleep 2; 
#big q is don’t wait for user input, lower q is only show warnings, -c is do it for whole system

#https://github.com/bstrauch24/cyberpatriot/blob/master/security.sh (is able to accept feedback)
#https://github.com/willshiao/cyberpatriot/blob/master/Scripts/Linux/meme.sh
#https://github.com/JoshuaTatum/cyberpatriot/blob/master/harrisburg-linux.sh
#https://github.com/willshiao/cyberpatriot/blob/master/Checklists/Linux/CyberPatriot%20Linux%20Checklist.pdf
#https://github.com/hexidecimals/cyberpatriot/blob/master/linux.sh (has way to find readme by itself)

message="The script has finished executing on this computer. This is being run as $(whoami) and has $(finger $(whoami) )."
number=0000000001
#sendtext () { curl http://textbelt.com/text -d number=$number -d "message=$message";echo message sent; }
#sendtext();

#Text messages from terminal:
#https://linuxsupernoob.wordpress.com/2013/01/08/how-to-send-text-message-from-terminal/
#http://osxdaily.com/2014/03/12/send-sms-text-message-from-command-line/

echo "THIS SCRIPT IS NOW FINISHED. PROCEED TO DO OTHER THINGS."

